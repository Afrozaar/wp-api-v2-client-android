apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def globalVersionName = "1.1.4"
def globalVersionCode = buildVersionCode(globalVersionName)

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    // publish all buildTypes
    publishNonDefault true

    //defaultPublishConfig "debug"

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        versionCode globalVersionCode
        versionName globalVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        //disable 'TypographyFractions', 'TypographyQuotes'
        // turn on the given issue id's
        //enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        //check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        //noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        //textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        //xmlReport false
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // HTTP libs
    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    // Parsing libs
    compile 'com.google.code.gson:gson:2.7'

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    compile "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*android.libraryVariants.all { variant ->

    variant.outputs.each { output ->

        def aarSuffix = "-${variant.mergedFlavor.versionName}"
        def originalApkFile = output.getOutputFile()
        //def newApkFile = originalApkFile.name.replace(".aar", "${aarSuffix}.aar")
        def newApkFile = "wp-api-${variant.buildType.name}${aarSuffix}.aar"
        output.setOutputFile(new File("${projectDir}/aars/${newApkFile}"))

        // print the APK path as the last step before install, at which point the apk is complete
        variant.assemble?.doFirst { // the install task can be null
            println ""
            println "Output file:"
            println output.getOutputFile()
            println ""
        }
    }
}*/

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        library(MavenPublication) {
            groupId 'com.afrozaar.wordpress'
            artifactId 'wp-api-v2-client-android'
            version globalVersionName
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/library-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }

        libraryDebug(MavenPublication) {
            groupId 'com.afrozaar.wordpress'
            artifactId 'wp-api-v2-client-android-debug'
            version globalVersionName
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/library-debug.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = 'libs-release-local'
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
            maven = true
        }
        defaults {
            publishBuildInfo = false
            publishArtifacts = true
            publications('library', 'libraryDebug')
            publishPom = true //Publish generated POM files to Artifactory (true by default)
            publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local'
            username = "${artifactory_user}" // The resolver user name
            password = "${artifactory_password}" // The resolver password
        }
    }

}
